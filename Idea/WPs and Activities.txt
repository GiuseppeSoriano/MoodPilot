WP1: DATABASE CONFIGURATION AND DESIGN (DB)
1. Requirements Analysis:
   - Collect system-required data (FER, evaluations, feedback, sensor data).  
   - Identify relationships between main entities.  
2. Schema Design:
   - Define main tables (e.g., `Passengers`, `Drivers`, `Trips`, `Evaluations`).  
   - Normalize the schema to eliminate redundancies and ensure consistency.  
3. Database Implementation:
   - Create tables and define relationships (e.g., 1:N, N:N).  
   - Configure indexes to optimize primary queries.  
4. Query Optimization:
   - Develop queries for common operations (e.g., insert evaluations, calculate the average of the last 500 evaluations).  
   - Optimize performance on simulated datasets.  
5. Testing and Validation:
   - Verify referential integrity and query functionality.  
   - Simulate increasing loads to assess scalability. 


WP2: BACKEND DEVELOPMENT
1. Development Environment Setup:
   - Configure the backend framework (e.g., Flask).  
   - Structure the project.  
2. RESTful API Implementation:
   - Create endpoints for communication with the car controller, frontend, and database (e.g., `/sendEvaluation`, `/getUserData`).  
   - Validate and authenticate API requests.  
3. Database Integration:
   - Connect to the database using an ORM (Object-Relational Mapping).  
   - Develop backend queries to handle complex data operations (e.g., calculate the average of the last 500 evaluations).  
4. Security and Privacy:
   - Implement security protocols (e.g., TLS 1.3 for communications).  
   - Encrypt sensitive data.  
   - Create data management policies compliant with GDPR.  
6. Testing and Validation:
   - Test APIs (unit tests and integration tests).  
   - Simulate workloads to ensure scalability. 


WP3: CAR CONTROLLER DEVELOPMENT
1. Hardware Setup:
   - Configure the hardware environment (e.g., edge device, GPU, or TPU).  
   - Install libraries required to run the FER model.  
2. FER Model Deployment:
   - Adapt the FER model for embedded hardware.  
   - Test model performance in simulated scenarios.  
3. Sensor Data Collection:
   - Develop drivers or scripts to read data from the vehicle (e.g., CAN bus).  
   - Validate collected data and convert it into usable formats.  
4. Backend Communication:
   - Configure secure communication via RESTful APIs or WebSocket.  
   - Implement a protocol to transmit FER results and sensor data to the backend.  
5. Optimization and Testing:
   - Optimize performance to ensure low latency (<500 ms).  
   - Test in real environments and simulate workloads. 


WP4: FRONTEND DEVELOPMENT (MOBILE APP)
1. UI/UX Design:
   - Create wireframes and mockups for key app sections (e.g., evaluation screens, user profiles).  
   - Validate design with a sample of users.  
2. Implementation of Core Features:
   - Integrate with the backend via RESTful APIs.  
   - Develop screens for viewing and modifying forms completed by FER.  
   - Create sections for providing manual evaluations (passengers) and viewing evaluations (drivers).  
3. Personal Data Management:
   - Design a screen for user profile management, allowing data updates and visualization.  
   - Implement GDPR-compliant policies (e.g., data deletion requests).  
4. App Testing:
   - Test the app on Android and iOS devices to ensure compatibility and performance.  
   - Identify and fix bugs.  
5. Final Optimization:
   - Improve performance (e.g., loading times).  
   - Apply feedback from user tests. 


WP5: SYSTEM INTEGRATION
1. Preparation for Integration:
   - Review interfaces and APIs exposed by the backend and mobile app.  
   - Configure a test environment for integration.  
2. Backend-Database Integration:
   - Validate query handling and data storage.  
   - Test primary operations (e.g., read/write evaluation data).  
3. Backend-Car Controller Integration:
   - Validate secure transmission of sensor data from the car controller to the backend.  
   - Test communication latency.  
4. Backend-Frontend Integration:
   - Verify functionality of RESTful APIs for the frontend.  
   - Test core features (e.g., retrieving forms, submitting evaluations).  
5. Bug Fixing and Optimization:
   - Resolve bugs identified during tests.  
   - Optimize data flow to reduce latency and improve performance. 



WP6: SECURITY AND PRIVACY


